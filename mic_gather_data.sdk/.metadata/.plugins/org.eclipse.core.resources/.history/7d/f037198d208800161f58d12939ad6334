/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include "xparameters.h"
#include "xintc.h"
#include "xaxidma.h"
#include "xaxidma_hw.h"
#include "xil_cache.h"

#include "lwip/err.h"
#include "lwip/tcp.h"
#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif

#define DMA_DEVICE_ID		( XPAR_AXI_DMA_0_DEVICE_ID )
#define DMA_INT_ID 			( XPAR_INTC_0_AXIDMA_0_VEC_ID )
#define DMA_BUFF_ADDR		( 0x80200000 )
#define TCP_PAYLOAD_SIZE	( 1024 )

extern XIntc intc;
static XAxiDma dma_obj;
static volatile bool dmaready;
static volatile bool tcpsendready;

err_t tcp_sent_fn_def( void *arg, struct tcp_pcb *tpcb, u16_t len )
{
	tcpsendready = true;
	return ERR_OK;
}

void dma_isr( void* param )
{
	( void ) param;

	u32 intreg = XAxiDma_IntrGetIrq( &dma_obj, XAXIDMA_DEVICE_TO_DMA );

	if ( intreg&XAXIDMA_IRQ_ERROR_MASK )
	{
		XAxiDma_IntrAckIrq( &dma_obj, XAXIDMA_IRQ_ERROR_MASK, XAXIDMA_DEVICE_TO_DMA );
	}

	if ( intreg&XAXIDMA_IRQ_IOC_MASK )
	{
		XAxiDma_IntrAckIrq( &dma_obj, XAXIDMA_IRQ_IOC_MASK, XAXIDMA_DEVICE_TO_DMA );
	}

	dmaready = true;
}

int transfer_data() {
	return 0;
}

void print_app_header()
{
	xil_printf("\n\r\n\r-----lwIP TCP data gather server ------\n\r");
	//xil_printf("TCP packets sent to port 6001 will the app to gather data\n\r");
}

err_t recv_callback(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err)
{
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	/* indicate that the packet has been received */
	tcp_recved(tpcb, p->len);

	xil_printf( "Packet received...\n\r" );

	/* Start DMA and write data over socket to client. */
	if ( p->len==sizeof( u32 ) )
	{
		size_t samples_bytes;
		u32 samples_len;

		/* This might be particular to Microblaze, but typecasting
		the void* to u32* appears to return an incorrect cast. The
		mess below is the solution. */
		samples_len = 0;
		{
			u8* s = ( u8* )p->payload;
			u8* e = s + sizeof( u32 );
			while ( s!= e)
				samples_len = ( ( *(s++) ) << ( ( sizeof( u32 )-1 )*8 ) )
					| ( samples_len >> 8 );
		}
		samples_bytes = sizeof( u16 )*samples_len;

		xil_printf( "Samples required: %u...\n\r", samples_len );
		xil_printf( "Initiating DMA transfer...\n\r" );

		/* Start DMA transfer to grab samples from PmodMIC. */
		dmaready = false;
		switch ( XAxiDma_SimpleTransfer( &dma_obj,
				( UINTPTR ) DMA_BUFF_ADDR, samples_bytes,
				XAXIDMA_DEVICE_TO_DMA ) )
		{
		case XST_INVALID_PARAM:
			xil_printf( "Invalid parameter!\n\r" );
			break;
		case XST_FAILURE:
			xil_printf( "Failed!\n\r" );
			break;
		default:
			xil_printf( "Weird response!\n\r" );
			break;
		case XST_SUCCESS:
			{
				xil_printf( "Transferring samples over TCP...\n\r" );

				/* Block until interrupt triggers. */
				while ( dmaready==false )
					continue;

				/* Since the core doesn't have a tlast,
				the DMA will return an error and must be
				reset and have its interrupts enabled. */
				XAxiDma_Reset( &dma_obj );
				XAxiDma_IntrEnable( &dma_obj, (XAXIDMA_IRQ_IOC_MASK|XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DEVICE_TO_DMA );

				/* Data cache must be invalidated to see data. */
				Xil_DCacheInvalidateRange( DMA_BUFF_ADDR, samples_bytes );

				/* Send data back over socket. */
				{
					u8* s;
					//tcp_sent( tpcb, tcp_sent_fn_def );
					for ( s = ( u8* ) DMA_BUFF_ADDR;
							samples_bytes>TCP_PAYLOAD_SIZE;
							s += TCP_PAYLOAD_SIZE, samples_bytes -= TCP_PAYLOAD_SIZE )
					{
						tcpsendready = false;
						err = tcp_write(tpcb, ( void* ) s, TCP_PAYLOAD_SIZE, 1);
//						while ( tcpsendready==false )
//							continue;
						if ( err!=ERR_OK )
						{
							xil_printf( "Failed!\n\r" );
						}
						tcp_output( tpcb );
					}
					err = tcp_write(tpcb, ( void* ) s, samples_bytes, 1);
					if ( err!=ERR_OK )
					{
						xil_printf( "Failed!\n\r" );
					}
				}



			}
			break;
		}
	}

	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}

err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
{
	static int connection = 1;

	/* set the receive callback for this connection */
	tcp_recv(newpcb, recv_callback);

	/* just use an integer number indicating the connection id as the
	   callback argument */
	tcp_arg(newpcb, (void*)(UINTPTR)connection);

	/* increment for subsequent accepted connections */
	connection++;

	xil_printf( "Connection established...\n\r" );

	return ERR_OK;
}


int start_application()
{
	struct tcp_pcb *pcb;
	err_t err;
	unsigned port = 7;

	/* Initialize DMA. */
	{
		XAxiDma_Config* config;
		config = XAxiDma_LookupConfig( DMA_DEVICE_ID );
		if ( config==NULL )
		{
			xil_printf( "Couldn't find config for DMA.\n\r" );
			return -1;
		}

		if ( XAxiDma_CfgInitialize( &dma_obj, config ) != XST_SUCCESS )
		{
			xil_printf( "Couldn't initialize DMA.\n\r" );
			return -1;
		}

		XAxiDma_IntrEnable( &dma_obj, (XAXIDMA_IRQ_IOC_MASK|XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DEVICE_TO_DMA );

		if ( XIntc_Connect( &intc, DMA_INT_ID, dma_isr, NULL )!=XST_SUCCESS )
		{
			xil_printf( "Couldn't connect isq for DMA to intc.\n\r" );
			return -1;
		}
		XIntc_Enable( &intc, DMA_INT_ID );
	}

	/* create new TCP PCB structure */
	pcb = tcp_new();
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	/* bind to specified @port */
	err = tcp_bind(pcb, IP_ADDR_ANY, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}

	/* we do not need any arguments to callback functions */
	tcp_arg(pcb, NULL);

	/* listen for connections */
	pcb = tcp_listen(pcb);
	if (!pcb) {
		xil_printf("Out of memory while tcp_listen\n\r");
		return -3;
	}

	/* specify callback to use for incoming connections */
	tcp_accept(pcb, accept_callback);

	xil_printf("TCP data server started @ port %d\n\r", port);

	return 0;
}
